AWSTemplateFormatVersion: '2010-09-09'
Description: Schedule automatic deletion of CloudFormation stacks
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Input configuration
        Parameters:
          - TTL
    ParameterLabels:
      TTL:
        default: Time-to-live in minutes
Parameters:
  TTL:
    Type: Number
    Description: Time-to-live in minutes for the stacks.
Resources:
  DeleteCFNLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: ["lambda.amazonaws.com"]
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "lambda_policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "cloudformation:DeleteStack"
            - "cloudformation:DescribeStacks"
            - "cloudformation:ListStacks"
            Resource: "*"
  DeleteCFNLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - DeleteCFNLambdaExecutionRole
    Properties:
      FunctionName: "DeleteOldCFNStacks"
      Code:
        ZipFile: |
          import boto3
          import os
          from datetime import datetime, timedelta, timezone
          
          def delete_stacks(ttl_minutes):
              patterns = ['feat', 'rel', 'hotfix']
              cfn = boto3.client('cloudformation')
              response = cfn.describe_stacks()
              now = datetime.now(timezone.utc)
              delete_threshold = now - timedelta(minutes=ttl_minutes)
              
              for stack in response['Stacks']:
                  stack_name = stack['StackName']
                  stack_creation_time = stack['CreationTime']
                  
                  if stack_creation_time.tzinfo is None:
                      stack_creation_time = stack_creation_time.replace(tzinfo=timezone.utc)
                  
                  if any(pattern in stack_name for pattern in patterns) and stack_creation_time < delete_threshold:
                      try:
                          cfn.delete_stack(StackName=stack_name)
                          print(f"Deleted stack: {stack_name}")
                      except Exception as e:
                          print(f"Failed to delete stack: {stack_name}, Error: {str(e)}")
                          
              return "SUCCESS"
          
          def handler(event, context):
              ttl_minutes = int(os.environ['ttl_minutes'])
              return delete_stacks(ttl_minutes)
      Environment:
        Variables:
          ttl_minutes: !Ref 'TTL'
      Handler: "index.handler"
      Runtime: "python3.9"
      Timeout: "10"
      Role: !GetAtt DeleteCFNLambdaExecutionRole.Arn
  DeleteStackEventRule:
     DependsOn:
       - DeleteCFNLambda
     Type: "AWS::Events::Rule"
     Properties:
       Description: Delete stack event
       ScheduleExpression: "rate(5 minutes)"
       State: "ENABLED"
       Targets: 
          - 
            Arn: !GetAtt DeleteCFNLambda.Arn
            Id: 'DeleteCFNLambda'
  PermissionForDeleteCFNLambda: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeleteOldCFNStacks"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt DeleteStackEventRule.Arn
  BasicLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: ["lambda.amazonaws.com"]
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "lambda_policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
